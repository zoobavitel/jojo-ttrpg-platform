# Generated by Django 5.2 on 2025-07-09 17:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('standard', 'Standard'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hp_cost', models.IntegerField()),
                ('required', models.BooleanField(default=False)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Detriment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hp_value', models.IntegerField()),
                ('required', models.BooleanField(default=False)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='HamonAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hamon_type', models.CharField(choices=[('FOUNDATION', 'Foundation Hamon'), ('TRADITIONALIST', 'Traditionalist (Zeppeli Style)'), ('MEDICAL', 'Medical Hamon'), ('MARTIAL', 'Martial Hamon'), ('INVESTIGATIVE', 'Investigative Hamon')], max_length=20)),
                ('description', models.TextField()),
                ('stress_cost', models.IntegerField(default=0, help_text='Stress cost to use this ability')),
                ('frequency', models.CharField(blank=True, help_text="Usage frequency (e.g., 'Once per score')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Heritage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('base_hp', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpinAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('spin_type', models.CharField(choices=[('FOUNDATION', 'Spin Foundation'), ('CAVALIER', 'Cavalier'), ('ARCHITECT', 'Architect'), ('GUNSLINGER', 'Gunslinger'), ('TUSK', 'Tusk')], max_length=20)),
                ('description', models.TextField()),
                ('stress_cost', models.IntegerField(default=0, help_text='Stress cost to use this ability')),
                ('frequency', models.CharField(blank=True, help_text="Usage frequency (e.g., 'Once per scene')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Trauma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('wanted_stars', models.IntegerField(default=0)),
                ('gm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns_led', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(related_name='campaigns_joined', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('true_name', models.CharField(max_length=100)),
                ('alias', models.CharField(blank=True, max_length=100, null=True)),
                ('appearance', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='character_images/')),
                ('level', models.IntegerField(default=1)),
                ('bonus_hp_from_xp', models.IntegerField(default=0)),
                ('background_note', models.TextField(blank=True, null=True)),
                ('background_note2', models.TextField(blank=True, null=True)),
                ('action_dots', models.JSONField(default=dict)),
                ('playbook', models.CharField(choices=[('STAND', 'Stand'), ('HAMON', 'Hamon'), ('SPIN', 'Spin')], default='STAND', max_length=20)),
                ('stand_type', models.CharField(blank=True, max_length=50, null=True)),
                ('stand_name', models.CharField(blank=True, max_length=100, null=True)),
                ('stand_form', models.TextField(blank=True, null=True)),
                ('stand_conscious', models.BooleanField(default=True)),
                ('coin_stats', models.JSONField(default=dict)),
                ('armor_type', models.CharField(blank=True, choices=[('LIGHT', 'Light'), ('MEDIUM', 'Medium'), ('HEAVY', 'Heavy'), ('ENCUMBERED', 'Encumbered')], max_length=20, null=True)),
                ('close_friend', models.CharField(blank=True, max_length=100)),
                ('rival', models.CharField(blank=True, max_length=100)),
                ('vice_details', models.TextField(blank=True, null=True)),
                ('loadout', models.IntegerField(default=1)),
                ('stress', models.IntegerField(default=0)),
                ('trauma', models.JSONField(default=list)),
                ('healing_clock_segments', models.IntegerField(default=4)),
                ('healing_clock_filled', models.IntegerField(default=0)),
                ('light_armor_used', models.BooleanField(default=False)),
                ('medium_armor_used', models.BooleanField(default=False)),
                ('heavy_armor_used', models.BooleanField(default=False)),
                ('harm_level1_used', models.BooleanField(default=False)),
                ('harm_level1_name', models.CharField(blank=True, max_length=100, null=True)),
                ('harm_level2_used', models.BooleanField(default=False)),
                ('harm_level2_name', models.CharField(blank=True, max_length=100, null=True)),
                ('harm_level3_used', models.BooleanField(default=False)),
                ('harm_level3_name', models.CharField(blank=True, max_length=100, null=True)),
                ('harm_level4_used', models.BooleanField(default=False)),
                ('harm_level4_name', models.CharField(blank=True, max_length=100, null=True)),
                ('xp_clocks', models.JSONField(default=dict)),
                ('total_xp_spent', models.IntegerField(default=0)),
                ('heritage_points_gained', models.IntegerField(default=0)),
                ('stand_coin_points_gained', models.IntegerField(default=0)),
                ('action_dice_gained', models.IntegerField(default=0)),
                ('inventory', models.JSONField(blank=True, default=list, help_text='List of items the character possesses')),
                ('reputation_status', models.JSONField(blank=True, default=dict, help_text="Tracks character's reputation with allies, rivals, and factions (e.g., {'Faction Name': 2, 'NPC Name': -1})")),
                ('custom_ability_description', models.TextField(blank=True, null=True)),
                ('custom_ability_type', models.CharField(choices=[('single_with_3_uses', 'Single Ability with 3 Uses'), ('three_separate_uses', 'Three Separate Abilities')], default='single_with_3_uses', max_length=32)),
                ('extra_custom_abilities', models.JSONField(blank=True, default=list, null=True)),
                ('development_temporary_ability', models.JSONField(blank=True, default=None, help_text='Temporary ability gained from A-rank Development Potential until the end of the session', null=True)),
                ('faction_reputation', models.JSONField(blank=True, default=list, null=True)),
                ('gm_character_locked', models.BooleanField(default=False)),
                ('gm_allowed_edit_fields', models.JSONField(blank=True, default=dict, null=True)),
                ('gm_can_have_s_rank_stand_stats', models.BooleanField(default=False)),
                ('gm_locked_fields', models.JSONField(blank=True, default=list, help_text="List of fields locked by the GM (e.g., ['level', 'action_dots'])")),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='characters', to='characters.campaign')),
                ('selected_benefits', models.ManyToManyField(blank=True, related_name='characters', to='characters.benefit')),
                ('standard_abilities', models.ManyToManyField(blank=True, related_name='characters_standard', to='characters.ability')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('changed_fields', models.JSONField()),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history_entries', to='characters.character')),
                ('editor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Crew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='crew_images/')),
                ('proposed_name', models.CharField(blank=True, max_length=100, null=True)),
                ('tier', models.IntegerField(default=0)),
                ('hold', models.CharField(choices=[('weak', 'Weak'), ('strong', 'Strong')], default='weak', max_length=10)),
                ('rep', models.IntegerField(default=0)),
                ('wanted_level', models.IntegerField(default=0)),
                ('coin', models.IntegerField(default=0)),
                ('stash', models.IntegerField(default=0)),
                ('claims', models.JSONField(default=dict)),
                ('upgrades', models.JSONField(default=list)),
                ('xp_trigger', models.TextField(blank=True, help_text='XP trigger for the crew')),
                ('personalization_questions', models.JSONField(blank=True, default=list, help_text='Questions to personalize the crew')),
                ('starting_upgrades', models.JSONField(blank=True, default=list, help_text='Starting upgrades for the crew')),
                ('favored_operations', models.JSONField(blank=True, default=list, help_text='List of favored operation types')),
                ('contacts', models.JSONField(blank=True, default=list, help_text='List of contacts with their details')),
                ('crew_upgrades', models.JSONField(blank=True, default=list, help_text='List of crew-specific upgrades')),
                ('special_abilities', models.JSONField(blank=True, default=list, help_text='List of crew special abilities')),
                ('approved_by', models.ManyToManyField(blank=True, related_name='approved_crew_names', to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crews', to='characters.campaign')),
                ('proposed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposed_crew_names', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='crew',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='characters.crew'),
        ),
        migrations.AddField(
            model_name='character',
            name='selected_detriments',
            field=models.ManyToManyField(blank=True, related_name='characters', to='characters.detriment'),
        ),
        migrations.CreateModel(
            name='DowntimeActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('ACQUIRE_ASSET', 'Acquire Asset'), ('LONG_TERM_PROJECT', 'Long-term Project'), ('RECOVER', 'Recover'), ('REDUCE_HEAT', 'Reduce Heat'), ('TRAIN', 'Train'), ('INDULGE_VICE', 'Indulge Vice'), ('REDUCE_WANTED_LEVEL', 'Reduce Wanted Level')], max_length=20)),
                ('description', models.TextField()),
                ('result', models.TextField(blank=True, help_text='What was the outcome?')),
                ('stress_relieved', models.IntegerField(default=0)),
                ('harm_healed', models.IntegerField(default=0)),
                ('progress_made', models.IntegerField(default=0, help_text='Progress ticks on clocks')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downtime_activities', to='characters.character')),
            ],
        ),
        migrations.CreateModel(
            name='Faction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('faction_type', models.CharField(choices=[('CRIMINAL', 'Criminal'), ('NOBLE', 'Noble'), ('MERCHANT', 'Merchant'), ('POLITICAL', 'Political'), ('RELIGIOUS', 'Religious'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('hold', models.CharField(choices=[('weak', 'Weak'), ('strong', 'Strong')], default='weak', max_length=10)),
                ('reputation', models.IntegerField(default=0)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='factions', to='characters.campaign')),
            ],
        ),
        migrations.AddField(
            model_name='detriment',
            name='heritage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detriments', to='characters.heritage'),
        ),
        migrations.AddField(
            model_name='character',
            name='heritage',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.heritage'),
        ),
        migrations.AddField(
            model_name='benefit',
            name='heritage',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='benefits', to='characters.heritage'),
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('level', models.IntegerField(default=1)),
                ('appearance', models.TextField(blank=True)),
                ('role', models.CharField(blank=True, max_length=100)),
                ('weakness', models.TextField(blank=True)),
                ('need', models.TextField(blank=True)),
                ('desire', models.TextField(blank=True)),
                ('rumour', models.TextField(blank=True)),
                ('secret', models.TextField(blank=True)),
                ('passion', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('stand_coin_stats', models.JSONField(default=dict)),
                ('playbook', models.CharField(choices=[('STAND', 'Stand'), ('HAMON', 'Hamon'), ('SPIN', 'Spin')], default='STAND', max_length=20)),
                ('custom_abilities', models.TextField(blank=True)),
                ('relationships', models.JSONField(default=dict)),
                ('harm_clock_current', models.IntegerField(default=0)),
                ('vulnerability_clock_current', models.IntegerField(default=0)),
                ('armor_charges', models.IntegerField(default=0)),
                ('stand_description', models.TextField(blank=True)),
                ('stand_appearance', models.TextField(blank=True)),
                ('stand_manifestation', models.TextField(blank=True)),
                ('special_traits', models.TextField(blank=True)),
                ('stand_name', models.CharField(blank=True, max_length=100, null=True)),
                ('purveyor', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('items', models.JSONField(blank=True, default=list)),
                ('contacts', models.JSONField(blank=True, default=list)),
                ('faction_status', models.JSONField(blank=True, default=dict)),
                ('inventory', models.JSONField(blank=True, default=list)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='npcs', to='characters.campaign')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_npcs', to=settings.AUTH_USER_MODEL)),
                ('heritage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.heritage')),
            ],
        ),
        migrations.CreateModel(
            name='ProgressClock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('clock_type', models.CharField(choices=[('PROJECT', 'Long-term Project'), ('HEALING', 'Healing Clock'), ('COUNTDOWN', 'Countdown Clock'), ('CUSTOM', 'Custom Clock')], max_length=20)),
                ('max_segments', models.IntegerField(default=4, help_text='Total number of segments (4, 6, or 8)')),
                ('filled_segments', models.IntegerField(default=0, help_text='Currently filled segments')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.campaign')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.character')),
                ('crew', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.crew')),
                ('faction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.faction')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('score_type', models.CharField(choices=[('ASSAULT', 'Assault'), ('DECEPTION', 'Deception'), ('STEALTH', 'Stealth'), ('OCCULT', 'Occult'), ('SOCIAL', 'Social'), ('TRANSPORT', 'Transport')], max_length=20)),
                ('target', models.CharField(help_text='What/who is the target?', max_length=100)),
                ('description', models.TextField()),
                ('rep_gained', models.IntegerField(default=0)),
                ('coin_gained', models.IntegerField(default=0)),
                ('heat_gained', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('success_level', models.CharField(blank=True, help_text='How well did it go?', max_length=50)),
                ('consequences', models.TextField(blank=True, help_text='What complications arose?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='characters.crew')),
                ('participants', models.ManyToManyField(related_name='scores_participated', to='characters.character')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Title or name of the session/episode', max_length=200)),
                ('session_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True, help_text='Overall plot or story summary for the session')),
                ('objective', models.TextField(blank=True, help_text='The main goal for this session')),
                ('planned_for_next_session', models.TextField(blank=True, help_text='Notes for the next session')),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed')], default='PLANNED', max_length=10)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='characters.campaign')),
                ('characters_involved', models.ManyToManyField(blank=True, related_name='sessions_involved', to='characters.character')),
                ('factions_involved', models.ManyToManyField(blank=True, related_name='sessions_involved', to='characters.faction')),
                ('npcs_involved', models.ManyToManyField(blank=True, related_name='sessions_involved', to='characters.npc')),
            ],
        ),
        migrations.CreateModel(
            name='ExperienceTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_date', models.DateTimeField(auto_now_add=True)),
                ('trigger', models.CharField(choices=[('BELIEFS', 'Express beliefs, drives, heritage, or background'), ('STRUGGLE', 'Struggle with issues from vice or trauma'), ('DESPERATE', 'Address a challenge with action rating 0'), ('STANDOUT', 'Standout action or leadership')], max_length=20)),
                ('description', models.TextField(help_text='What did the character do to earn this XP?')),
                ('xp_gained', models.IntegerField(default=1)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience_entries', to='characters.character')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='xp_entries', to='characters.session')),
            ],
        ),
        migrations.AddField(
            model_name='campaign',
            name='active_session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='active_in_campaign', to='characters.session'),
        ),
        migrations.CreateModel(
            name='SessionEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('DICE_ROLL', 'Dice Roll'), ('STRESS_CHANGE', 'Stress Change'), ('HARM_APPLIED', 'Harm Applied'), ('ITEM_ACQUIRED', 'Item Acquired'), ('DEVILS_BARGAIN', "Devil's Bargain"), ('LOCATION_CHANGE', 'Location Change'), ('ARMOR_EXPENDITURE', 'Armor Expenditure'), ('OTHER', 'Other')], max_length=20)),
                ('details', models.JSONField(default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session_events', to='characters.character')),
                ('npc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session_events', to='characters.npc')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='characters.session')),
            ],
        ),
        migrations.CreateModel(
            name='Stand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('COLONY', 'Colony Stand'), ('TOOLBOUND', 'Tool Bound'), ('PHENOMENA', 'Phenomena'), ('AUTOMATIC', 'Automatic'), ('FIGHTING', 'Fighting Spirit')], max_length=30)),
                ('form', models.CharField(choices=[('Humanoid', 'Humanoid'), ('Non-Humanoid', 'Non-Humanoid'), ('Phenomenon', 'Phenomenon')], max_length=30)),
                ('consciousness_level', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F')], max_length=1)),
                ('power', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('speed', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('range', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('durability', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('precision', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('development', models.CharField(choices=[('S', 'S - Exceptional'), ('A', 'A - Elite'), ('B', 'B - Skilled'), ('C', 'C - Average'), ('D', 'D - Below Average'), ('F', 'F - Flawed')], max_length=1)),
                ('armor', models.IntegerField(default=0)),
                ('character', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stand', to='characters.character')),
                ('standard_ability', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stand_default', to='characters.ability')),
            ],
        ),
        migrations.CreateModel(
            name='StandAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('stand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='abilities', to='characters.stand')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='vice',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='characters.vice'),
        ),
        migrations.CreateModel(
            name='CrewFactionRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reputation_value', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faction_relationships', to='characters.crew')),
                ('faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crew_relationships', to='characters.faction')),
            ],
            options={
                'unique_together': {('crew', 'faction')},
            },
        ),
        migrations.CreateModel(
            name='FactionRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reputation_value', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('source_faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_relationships', to='characters.faction')),
                ('target_faction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_relationships', to='characters.faction')),
            ],
            options={
                'unique_together': {('source_faction', 'target_faction')},
            },
        ),
        migrations.CreateModel(
            name='CharacterHamonAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at_creation', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hamon_abilities', to='characters.character')),
                ('hamon_ability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.hamonability')),
            ],
            options={
                'unique_together': {('character', 'hamon_ability')},
            },
        ),
        migrations.CreateModel(
            name='CharacterSpinAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at_creation', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spin_abilities', to='characters.character')),
                ('spin_ability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.spinability')),
            ],
            options={
                'unique_together': {('character', 'spin_ability')},
            },
        ),
    ]
