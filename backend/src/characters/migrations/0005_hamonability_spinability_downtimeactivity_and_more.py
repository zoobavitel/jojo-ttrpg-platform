# Generated by Django 5.2 on 2025-06-10 23:57

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('characters', '0004_remove_ability_hp_cost_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='HamonAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hamon_type', models.CharField(choices=[('FOUNDATION', 'Foundation Hamon'), ('TRADITIONALIST', 'Traditionalist (Zeppeli Style)'), ('MEDICAL', 'Medical Hamon'), ('MARTIAL', 'Martial Hamon'), ('INVESTIGATIVE', 'Investigative Hamon')], max_length=20)),
                ('description', models.TextField()),
                ('stress_cost', models.IntegerField(default=0, help_text='Stress cost to use this ability')),
                ('frequency', models.CharField(blank=True, help_text="Usage frequency (e.g., 'Once per score')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SpinAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('spin_type', models.CharField(choices=[('FOUNDATION', 'Spin Foundation'), ('CAVALIER', 'Cavalier'), ('ARCHITECT', 'Architect'), ('GUNSLINGER', 'Gunslinger'), ('TUSK', 'Tusk')], max_length=20)),
                ('description', models.TextField()),
                ('stress_cost', models.IntegerField(default=0, help_text='Stress cost to use this ability')),
                ('frequency', models.CharField(blank=True, help_text="Usage frequency (e.g., 'Once per scene')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DowntimeActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('ACQUIRE_ASSET', 'Acquire Asset'), ('LONG_TERM_PROJECT', 'Long-term Project'), ('RECOVER', 'Recover'), ('REDUCE_HEAT', 'Reduce Heat'), ('TRAIN', 'Train'), ('INDULGE_VICE', 'Indulge Vice')], max_length=20)),
                ('description', models.TextField()),
                ('result', models.TextField(blank=True, help_text='What was the outcome?')),
                ('stress_relieved', models.IntegerField(default=0)),
                ('harm_healed', models.IntegerField(default=0)),
                ('progress_made', models.IntegerField(default=0, help_text='Progress ticks on clocks')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downtime_activities', to='characters.character')),
            ],
        ),
        migrations.CreateModel(
            name='ExperienceTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_date', models.DateTimeField(auto_now_add=True)),
                ('trigger', models.CharField(choices=[('BELIEFS', 'Express beliefs, drives, heritage, or background'), ('STRUGGLE', 'Struggle with issues from vice or trauma'), ('DESPERATE', 'Address a challenge with action rating 0'), ('STANDOUT', 'Standout action or leadership')], max_length=20)),
                ('description', models.TextField(help_text='What did the character do to earn this XP?')),
                ('xp_gained', models.IntegerField(default=1)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experience_entries', to='characters.character')),
            ],
        ),
        migrations.CreateModel(
            name='ProgressClock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('clock_type', models.CharField(choices=[('PROJECT', 'Long-term Project'), ('HEALING', 'Healing Clock'), ('COUNTDOWN', 'Countdown Clock'), ('CUSTOM', 'Custom Clock')], max_length=20)),
                ('max_segments', models.IntegerField(default=4, help_text='Total number of segments (4, 6, or 8)')),
                ('filled_segments', models.IntegerField(default=0, help_text='Currently filled segments')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('campaign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.campaign')),
                ('character', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.character')),
                ('crew', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='progress_clocks', to='characters.crew')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('score_type', models.CharField(choices=[('ASSAULT', 'Assault'), ('DECEPTION', 'Deception'), ('STEALTH', 'Stealth'), ('OCCULT', 'Occult'), ('SOCIAL', 'Social'), ('TRANSPORT', 'Transport')], max_length=20)),
                ('target', models.CharField(help_text='What/who is the target?', max_length=100)),
                ('description', models.TextField()),
                ('rep_gained', models.IntegerField(default=0)),
                ('coin_gained', models.IntegerField(default=0)),
                ('heat_gained', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('success_level', models.CharField(blank=True, help_text='How well did it go?', max_length=50)),
                ('consequences', models.TextField(blank=True, help_text='What complications arose?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='characters.crew')),
                ('participants', models.ManyToManyField(related_name='scores_participated', to='characters.character')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterHamonAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at_creation', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hamon_abilities', to='characters.character')),
                ('hamon_ability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.hamonability')),
            ],
            options={
                'unique_together': {('character', 'hamon_ability')},
            },
        ),
        migrations.CreateModel(
            name='CharacterSpinAbility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at_creation', models.BooleanField(default=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spin_abilities', to='characters.character')),
                ('spin_ability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='characters.spinability')),
            ],
            options={
                'unique_together': {('character', 'spin_ability')},
            },
        ),
    ]
